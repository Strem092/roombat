#include <Servo.h>

  
  
  //Pins that connect to the H bridge with the motors
  int motor1ForwardPin = 7;
  int motor2ReversePin = 3;
  int motor1ReversePin = 6;
  int motor2ForwardPin = 2 ;
  int motor1Enable = 9;
  int motor2Enable = 8;
  
  //Pin for the IR sensor
  int IRsensorPin = 1;
  
  //Pin for the Ultrasonic Sensor
  int USsensorTrigPin = 10;
  int USsensorEchoPin = 11;

  //Pin to control the servo
  int servoPin = 12;

  Servo IRservo;
  
void setup() {
  
  Serial.begin(9600);
   
  //Set the pin for the servo
  IRservo.attach(servoPin);
  

  //Set the pins for the Ultrasonic Sensor
  pinMode(USsensorTrigPin, OUTPUT);
  pinMode(USsensorEchoPin, INPUT);

  //Set the pins for the motors
  pinMode(motor1ForwardPin, OUTPUT);
  pinMode(motor2ForwardPin, OUTPUT);

  //Sets the pins to reverse the direction of the motor (with the H bridge)
  pinMode(motor1ReversePin, OUTPUT);
  pinMode(motor2ReversePin, OUTPUT);

  
  
}

void loop() {
  digitalWrite(motor1Enable, HIGH);
  digitalWrite(motor2Enable, HIGH);
  
  float IRdistanceLeft;
  float IRdistanceRight;
  int USdistance=0;
  float IRdistance;
  

  //Sets the servo to look straight ahead
  IRservo.write(85);
  delay(1000);

  
  
  //Sets the pin for the IR sensor to an input to read it (IR sensor sends different voltages for different ranges: Analog pin)
  pinMode(IRsensorPin, INPUT);

  
  IRdistance = getIRdistance();

  USdistance = getUSdistance();

  
  
  //Checks if it goes over an edge
  if(USdistance > 5) {
    
    stopWheelsFast();
    
    
    while(USdistance > 5){
      USdistance = getUSdistance();
      turnLeftNinety();
    }
    
    
  } else if(IRdistance < 15){

    stopWheelsFast();
    
    
    

    IRservo.write(15);
    delay(1000);

    IRdistanceLeft = getIRdistance();
/*    
    for(int i = 0; i<= 45; i++){
      //Makes an array of distances for the left/right
      IRservo.write(i*4);
      delay(30);
      volts = analogRead(5)*0.0048828125; //5V/1024
      IRdistance = 13*pow(volts, -1.1);

      sumLeft = sumLeft+IRdistance;
      
    }
    for(int i = 0; i<= 90; i++){
      //Makes an array of distances for the left/right
      IRservo.write(i*4);
      delay(30);
      volts = analogRead(5)*0.0048828125; //5V/1024
      IRdistance = 13*pow(volts, -1.1);

      sumRight = sumRight+IRdistance;
      
    }
*/
   IRservo.write(180);
   delay(1000);
   IRdistanceRight = getIRdistance();
    
   if(IRdistanceLeft > IRdistanceRight){
    turnLeftNinety();
   } else {
    turnRightNinety();
   }

   goForward();

   
    
  } 

  goForward();
  
    
  Serial.print("\n IR: ");
  Serial.print(IRdistance);
  Serial.print("\n Ultra: ");
  Serial.print(USdistance);
  
  

 

  
  
}

void goForward(){
  digitalWrite(motor1ForwardPin, HIGH);
  delay(10);
  digitalWrite(motor2ForwardPin, HIGH);
  delay(10);
  digitalWrite(motor1ReversePin, LOW);
  delay(10);
  digitalWrite(motor2ReversePin, LOW); 

  
  
  
 

  
  
}

void stopWheels(){

  digitalWrite(motor1ForwardPin, LOW);
  delay(10);
  digitalWrite(motor2ForwardPin, LOW);
  delay(10);
  digitalWrite(motor1ReversePin, LOW);
  delay(10);
  digitalWrite(motor2ReversePin, LOW);
  delay(1000);

  
}
void stopWheelsFast(){

  digitalWrite(motor1ForwardPin, LOW);
  delay(10);
  digitalWrite(motor2ForwardPin, LOW);
  delay(10);
  digitalWrite(motor1ReversePin, HIGH);
  delay(10);
  digitalWrite(motor2ReversePin, HIGH);
  delay(500);


  
  digitalWrite(motor1ForwardPin, LOW);
  delay(10);
  digitalWrite(motor2ForwardPin, LOW);
  delay(10);
  digitalWrite(motor1ReversePin, LOW);
  delay(10);
  digitalWrite(motor2ReversePin, LOW);
  delay(10);
  
}
int getUSdistance(){
  digitalWrite(USsensorTrigPin, LOW);
  delay(5);
  digitalWrite(USsensorTrigPin, HIGH);
  delay(10);
  digitalWrite(USsensorTrigPin, LOW);

  //Gets the duration of the ping and converts it to centimeters
  return pulseIn(USsensorEchoPin, HIGH)/29/2;
}

void turnRightNinety(){
  
   //We need 1.77 revoltutions of the motor to turn 90 degrees
    digitalWrite(motor1ForwardPin, HIGH);
    delay(10);
    digitalWrite(motor2ReversePin, HIGH);
    //Delay until it move 90 degrees *************************Fix the delay********************************
    delay(10);

    digitalWrite(motor1ReversePin, LOW);
    delay(10);
    digitalWrite(motor2ForwardPin, LOW);
    
    delay(500);

    stopWheels();
  
}
void turnLeftNinety(){
  
   //We need 1.77 revoltutions of the motor to turn 90 degrees
    digitalWrite(motor1ForwardPin, LOW);
    delay(10);
    digitalWrite(motor2ReversePin, LOW);
    delay(10);
    digitalWrite(motor1ReversePin, HIGH);
    delay(10);
    digitalWrite(motor2ForwardPin, HIGH);
    
    delay(500);
    stopWheels();
    
}

float getIRdistance(){
  float volts;
  float dist;
  volts = analogRead(5)*0.0048828125; //5V/1024
  dist = 13*pow(volts, -1.1);
  return dist;
}
//Conversion to inches function. Taken from the "ping" example

/*long microsecondsToInches(long microseconds) {
  return microseconds / 74 / 2;
}

//Conversion to centimeters function. Taken from the "ping" example

long microSecondsToCentimeters(long microseconds) {
  return microseconds / 29 / 2;
}
*/
